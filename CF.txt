------S3 Bucket---------
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: docck0111111
      AccessControl: PublicRead
      VersioningConfiguration:
        Status: Enabled

=====ec2========
Resources:
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-06489866022e12a14"
      KeyName: "satyam-2024"
      InstanceType: "t2.micro"
	  
	  
=======================
AWSTemplateFormatVersion: 2010-09-09
Description: Template to setup lifecycle configuration
Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket on which lifecycle configuration will apply
    Default: doccket0000111111
Resources:
  DemoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 40
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365
Outputs:
  BucketName:
    Value: !Ref DemoBucket
    Description: Name of the sample Amazon S3 bucket with a lifecycle configuration.	  
	  

	  
	  
===============
AWSTemplateFormatVersion: 2010-09-09
Description: Template to setup lifecycle configuration
Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket on which lifecycle configuration will apply
    Default: mydemobucket0001
Resources:
  DemoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365
Outputs:
  BucketName:
    Value: !Ref DemoBucket
    Description: Name of the sample Amazon S3 bucket with a lifecycle configuration.
======================	
--------Ec2------------
Resources:
  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId: ami-00e782930f1c3dbc7
      InstanceType: t2.micro
      KeyName: "harsh_mumbia"

-----------EC2-EIP----------------
AWSTemplateFormatVersion: 2010-09-09
Description: 'Template to Create an EC2 instance, EIP and associate with instance'
Parameters:
  ImageId:
    Type: String
    Description: Linux 2 AMI
    Default: ami-0cca134ec43cf708f
  InstanceType:
    Type: String
    Description: Choosing  t2 micro 
    Default: t2.micro
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: vpcdemo
Resources:
  DemoInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
  DemoElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !Ref DemoInstance
----------------------------------	  

------------EC2-with Volume----------
AWSTemplateFormatVersion: "2010-09-09"
Description: "First EC2 instance"
Resources:
 FirstLinuxEC2instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: 'ap-south-1a'
      ImageId: 'ami-0a3277ffce9146b74'
      InstanceType: 't2.micro'
      Tags:
      - Key: Name
        Value: Linux	  
      SecurityGroupIds:
        - 'sg-07fe153d5ba473701'
      Volumes:
        -
         Device: "/dev/sdf"
         VolumeId: !Ref NewVolume
 NewVolume:
  Type: AWS::EC2::Volume
  Properties:
    Size: 2
    AvailabilityZone: 'ap-south-1a'
    Tags:
      - Key: Name
        Value: Linux
  DeletionPolicy: Snapshot
  
  
  
--------------EC2 with EBS Volume + Secuirty Group---------
AWSTemplateFormatVersion: 2010-09-09
Resources:
  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId: ami-0a3277ffce9146b74
      InstanceType: t2.micro
      KeyName: "awsdailyclass"
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: "io1"
          Iops: "200"
          DeleteOnTermination: "false"
          VolumeSize: "5"
      SecurityGroups:
        - !Ref InstanceSecurityGroup01
  InstanceSecurityGroup01: 
    Type: "AWS::EC2::SecurityGroup"    
    Properties: 
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
          CidrIp: 0.0.0.0/0
          FromPort: "3306"
          IpProtocol: tcp
          ToPort: "3306" 

  
---
AWSTemplateFormatVersion: 2010-09-09
Description: Hello
Parameters:
  ImageId:
    Type: String
    Description: Linux 2 AMI
    Default: ami-0fc970315c2d38f01
  InstanceType:
    Type: String
    Description: Linux 2 AMI
    Default: t2.micro	
Resources: 
  EC2Instance:
    Type: "AWS::EC2::Instance"  
    Properties: 
      AvailabilityZone: ap-south-1a
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: awsdailyclass
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
  InstanceSecurityGroup: 
    Properties: 
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
          CidrIp: 0.0.0.0/0
          FromPort: "3306"
          IpProtocol: tcp
          ToPort: "3306"          
    Type: "AWS::EC2::SecurityGroup"

  IPAddress:
    Type: 'AWS::EC2::EIP'
  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref IPAddress	
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicIp	
----------------
AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: myvpc001
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/28
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet	  
============
AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: myvpc001
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.10.0/28
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-1a
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.30.0/28
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-1b		  
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.20.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-1a
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.40.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-1b	  
		  
===========================================
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: String
    Description: Name of the VPC
    Default: 10.0.0.0/17
  PublicSubnet:
    Type: String
    Description: Linux 2 AMI
    Default: t2.micro
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcId
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: myvpc001
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.10.0/28
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-1a
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.30.0/28
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-1b		  
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.20.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-1a
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.0.40.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-1b	  		


AWSTemplateFormatVersion: 2010-09-09
Description: RDS MySQL Database Instance

Resources:
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: MyDatabase
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to RDS instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # Restrict this for real-world use

Parameters:
  DBPassword:
    Type: String
    Description: The password for the DB admin account
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: "Password must be alphanumeric."

  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID for the database.

Outputs:
  DBInstanceEndpoint:
    Description: The endpoint of the RDS DB instance
    Value: !GetAtt MyDBInstance.Endpoint.Address
  DBInstancePort:
    Description: The port of the RDS DB instance
    Value: !GetAtt MyDBInstance.Endpoint.Port
  
 
